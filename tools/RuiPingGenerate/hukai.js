let _hmt = window._hmt || [];
window.dataLayer = window.dataLayer || [];

function gtag() {
    dataLayer.push(arguments);
}
gtag('js', new Date());
gtag('config', 'G-BM8WXEWW3P');

function track(eventName, title, seed) {
    gtag('event', eventName, {
        'event_label': title,
        'seed': seed,
        'title_seed': title + '_' + seed
    });
    _hmt.push(['_trackEvent', eventName, 'title', title]);
    _hmt.push(['_trackEvent', eventName, 'title_seed', title + '_' + seed]);
}

window.$ = function(selector) {
    return document.querySelector(selector);
}

function 获取网址参数(参数) {
    return new URL(window.location.href).searchParams.get(参数)
}

let 前言 = [
    "网友们对x一事的批评我认为有道理。",
    "最近，x事件迅速聚集了互联网上的关注。我觉得这件事与当前的大局关系不太大。笔者我本人更关心的方向还是，为什么x事件发生得如此容易，是什么样的利益驱动导致了对风险的漠视？",
    "笔者在这篇博文的一开始就呼吁官方对于x进行说明。在这个声明到来之前，我想与网友们共同厘清一些基本的逻辑。",
    "对于x，笔者有个基本判断，不一定对。",
    "笔者今天要说些可能挨骂的话。",
    "最近有x在互联网上逐渐发酵，并且出现了一些针对x背后相关人士的舆论声讨。",
    "近来由于x事件的发生，很多人都受委屈了。x，给那些群众造成的不便可想而知。",
    "对笔者而言，x不仅仅是一个重大的事件，更是值得思考的一件事，",
    "今天有两个人在微信里问我，最近的x是不是真的？我个人愿意相信，x是假的。尤其是，此前出过类似的情况，那些群众已经经历了测试。我相信并且希望x会是假的。"

]

let 论述 = [
    "先前曝出的x事件为何招致大量负面舆情，就是因为x脱离了人们的平常心和世俗认知，过犹不及。",
    "近期，另一则关于x的消息在网上突出出来。此消息强化了人们对先前公布的新闻所产生的联想。",
    "事到如今，让我们大家理性地共同面对这个问题。",
    "笔者想说的是，在x事件上，什么事都不能做过，而要追求统筹平衡。",
    "对x事件该批驳批驳，该质疑质疑，该诘问诘问，但唯独不能编造假消息。",
    "大家还记得吗，就在几天以前，某些媒体大肆炒作x。话音未落，最近又爆出与x相悖的消息。",
    "不得不说，一些媒体人关于x报导的倾向是很严重的，他们的做法不会给当事人赢来额外的尊重。希望他们克制自己的敏感神经，对x事件表现出最起码的责任感。这也是他们应有的良知和理性。",
    "很多人不想看x的报导，我也不忍看它，因为想象一下就感觉很难受。",
    "无论我们有多少怀疑，我们都不应离开基本的逻辑。这一次受到强烈冲击的首先是所有关于x的人。说句实话，当我看到搞来搞去又是x成为了舆论怀疑和不满的目标时，我心里多少有点不是滋味。",
    "这两天，多地出现了关于x的热潮。但有些不属于合理的范围内，应当紧急叫停。",
    "笔者从来不反对舆论场上有多元的观点发生各种碰撞，但笔者认为x的这次事件堪称是一番露怯的表演。",
    "公众之所以对x很敏感，我认为主要是对以往情况不太满意，对x问题缺少信心，所以对事件的一些细节全都朝着最不利的方向去解读了。",
    "我一点都不认为社会这样做是过分的，我认为对于x的反思是社会强烈进取心的表现，我们总是认为自己还有应当改善的空间，很担心纠错不彻底。其实笔者对改进和更加深刻的改革一直都很推崇，我们这样做的动作往往也很快。",
    "笔者今天略作梳理x发生的过程和原因，是为了提醒当前案例所暴露的一些缺陷和问题。",
    "笔者不主张这时候将主要精力用来往后看。",
    "x的情况引起舆论强烈不满。除了舆论本身存在一些因x引起的怨气，也有其他的原因，值得我们留意。",
    "笔者作为网络时事锐评高手，在此呼吁所有相关人士要以此为鉴。",
    "考虑到各方面造成的影响，x的出现仍然代表了一定的意义。",
    "冲突是难以避免的，我们必须尽快解决问题。"
]

let 后语 = [
    "我们的社会需要保持必要的宽松度，这是发展的基础性条件。它可能会带来一些问题，但我们的社会需要发展、强化对那些问题的承受力。这其实也是和谐的一项题中之义。",
    "希望国内的学者、媒体人都恪守实事求是的底线，在x事件中无论是站在什么立场上，出于什么目的，都不突破这个底线。",
    "所以在这个时候，我们大家一定要坚定地团结起来应对关于x的挑战。这是我们维护自身利益最为有效的途径。",
    "我看到有报道说x可以设法解决，我认为这种办法值得研究参考。只要大家都诚心，问题总是能够得到解决。",
    "笔者高兴地看到，昨天几家主流媒体的公号率先聚焦x事件，对此做了报道。希望主流媒体对这一问题的正视能够扩大成为整个社会的重视。",
    "以世界的眼光综观x的过程，不能不说，各种体制的社会看上去对阻止x有着各自的软肋。在开始阶段都不够坚决，眼看着风险出现了，但都有放不下的坛坛罐罐，心存各自的侥幸，直到那头灰犀牛以意外的速度闯到眼前。",
    "笔者作为高度关心x的互联网时事锐评专家，衷心希望x能得到妥善解决。"
]

let 名人名言 = [
    "莫泊桑a, 生活永远不像我们想的那样好，但也不会像我们想像的那样糟。b",
    "茨威格a, 所有命运赠送的礼物，早已在暗中标好了价格。b",
    "罗曼·罗兰a, 要散布阳光到别人心里，先得自己心里有阳光。b",
    "林肯a, 不要问你的国家能够为你做些什么，而要问你可以为国家做些什么。b",

    "我a, 一个专注办理问题的国家最终令人尊敬。",
    "我a, 网上有人说我是“和稀泥”、“八股文”，让他们说去吧，没关系。",
    "我a, 舆论给x事件的公平合理的讨论能有利于问题的解决。"
]

//替换b
let 后面垫话 = [
    '这不禁令笔者深思。',
    '笔者希望诸位也能好好地体会这句话。',
    '这似乎解答了笔者的疑惑。',
]

//替换a
let 前面垫话 = [
    '在之前这样说过',
    '曾经提到过',
    '说过这样的话',
    '之前讲到',
]

let 初始主题 = [
    '全球经济市场剧烈动荡',
    '中国人口老龄化加剧',
    '哥谭市水污染整治工作滞后',
    '中国出现奥密克戎病例',
    '2022春节联欢晚会'
]

let 下取整 = Math.floor;

let 同余乘数 = 251251;
let 同余加数 = 996996;
let 同余模 = Math.pow(2, 32);

let 随机种子 = 获取网址参数('随机种子') || 下取整(随便取一个数(0, 同余模, Math.random));

let x = 获取网址参数('x') || 随便取一句(初始主题)

$('input').value = x;

function 同余发生器() {
    随机种子 = (随机种子 * 同余乘数 + 同余加数) % 同余模;
    return 随机种子 / 同余模;
};

function 随便取一句(列表) {
    let 坐标 = 下取整(同余发生器() * 列表.length);
    return 列表[坐标];
}

function 随便取一个数(最小值 = 0, 最大值 = 50, 随机数函数 = 同余发生器) {
    let 数字 = 随机数函数() * (最大值 - 最小值) + 最小值;
    return 数字;
}

let 已有句子 = "";

function 来点论述() {
    let 句子 = 随便取一句(论述);

    //已有的句子不能重复出现！
    if (已有句子.search(句子) == -1) {
        已有句子 = 已有句子 + 句子;
        // RegExp('x','g')这里的g指替换句子里的所有x
        句子 = 句子.replace(RegExp('x', 'g'), x);
        return 句子;
    }
    return "";
}

function 来点前言() {
    let 句子 = 随便取一句(前言);

    //已有的句子不能重复出现！
    if (已有句子.search(句子) == -1) {
        已有句子 = 已有句子 + 句子;
        // RegExp('x','g')这里的g指替换句子里的所有x
        句子 = 句子.replace(RegExp('x', 'g'), x);
        return 句子;
    }
    return "";
}

function 来点后语() {
    let 句子 = 随便取一句(后语);

    //已有的句子不能重复出现！
    if (已有句子.search(句子) == -1) {
        已有句子 = 已有句子 + 句子;
        // RegExp('x','g')这里的g指替换句子里的所有x
        句子 = 句子.replace(RegExp('x', 'g'), x);
        return 句子;
    }
    return "";
}

function 来点名人名言() {
    let 名言 = 随便取一句(名人名言)

    //已有的句子不能重复出现！
    if (已有句子.search(名言) == -1) {
        已有句子 = 已有句子 + 名言;
        名言 = 名言.replace('a', 随便取一句(前面垫话))
        名言 = 名言.replace(RegExp('x', 'g'), x);
        名言 = 名言.replace('b', 随便取一句(后面垫话))
        return 名言;
    }
    return "";
}

function 增加段落(段落) {
    if (段落[段落.length - 1] === ' ') {
        段落 = 段落.slice(0, -2)
    }
    return '　　' + 段落
}

function 生成文章() {
    x = $('input').value
    history.pushState({
        url: window.location.href
    }, null, '?主题=' + x + '&随机种子=' + 随机种子);
    track('generator', x, 随机种子);
    let 文章 = []
    let 段落 = '';
    let 文章长度 = 0;
    let 结尾 = 来点后语();
    while (文章长度 < 996) {
        let 随机数 = 随便取一个数(); //随机数在0-50之间
        if (随机数 < 35 && 段落.length > 100) {
            段落 = 增加段落(段落);
            文章.push(段落);
            段落 = '';
        } else if (随机数 < 5) {
            let 句子 = 来点名人名言();
            文章长度 = 文章长度 + 句子.length;
            段落 = 段落 + 句子;
        } else {
            let 前言 = 来点前言();
            let 论述 = 来点论述();
            let 后语 = 来点后语();
            let 句子 = 前言 + 论述 + 后语;
            文章长度 = 文章长度 + 句子.length;
            段落 = 段落 + 句子;
        }
    }
    段落 = 段落 + 结尾;
    段落 = 增加段落(段落);
    文章.push(段落);
    let 排版 = '<div>' + 文章.join('</div><div>') + '</div>';
    $('#文章').innerHTML = 排版;

    已有句子 = "";
}
if (获取网址参数('x')) {
    生成文章();
    track('shared', x, 随机种子);
}